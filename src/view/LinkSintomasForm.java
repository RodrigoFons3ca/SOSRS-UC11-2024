/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
/**
 *
 * @author terra
 */
public class LinkSintomasForm extends javax.swing.JFrame {

    /**
     * Creates new form LinkSintomasForm
     */
    public LinkSintomasForm() {
         initComponents();
        loadDoencas();
        loadSintomas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doencaComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sintomasList = new javax.swing.JList<>();
        addButton = new javax.swing.JButton();
        linkButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Linkar doença com sintoma");

        doencaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione" }));

        jLabel1.setText("Selecione a Doença");

        jScrollPane1.setViewportView(sintomasList);

        addButton.setText("Adicionar");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        linkButton.setText("Vincular");
        linkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Selecione os Sintomas");

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(linkButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doencaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doencaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(linkButton)
                    .addComponent(jButton1))
                .addGap(31, 31, 31))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String selectedSintoma = sintomasList.getSelectedValue();
        if (selectedSintoma == null) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione um sintoma.");
            return;
        }

        DefaultListModel<String> model = (DefaultListModel<String>) sintomasList.getModel();
        if (model.contains(selectedSintoma)) {
            model.removeElement(selectedSintoma);
        } else {
            model.addElement(selectedSintoma);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void linkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkButtonActionPerformed
        Doenca selectedDoenca = (Doenca) doencaComboBox.getSelectedItem();
        if (selectedDoenca == null || "Selecione a Doença".equals(selectedDoenca.getDescricao())) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione uma doença.");
            return;
        }

        DefaultListModel<String> model = (DefaultListModel<String>) sintomasList.getModel();
        if (model.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, adicione sintomas para vincular.");
            return;
        }

        String url = "jdbc:mysql://localhost:3306/SOSRS";
        String user = "root";
        String password = "204080@Ro";

        String sql = "INSERT INTO doencassintomas (id_doenca, id_sintomas) VALUES (?, ?)";

        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            conn.setAutoCommit(false);

            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                for (int i = 0; i < model.size(); i++) {
                    String sintomaDescricao = model.getElementAt(i);

                    String getIdSintomaSql = "SELECT id_sintomas FROM Sintomas WHERE Doenca_sintomas = ?";
                    try (PreparedStatement getIdStmt = conn.prepareStatement(getIdSintomaSql)) {
                        getIdStmt.setString(1, sintomaDescricao);
                        try (ResultSet rs = getIdStmt.executeQuery()) {
                            if (rs.next()) {
                                int idSintoma = rs.getInt("id_sintomas");
                                pstmt.setInt(1, selectedDoenca.getId());
                                pstmt.setInt(2, idSintoma);
                                pstmt.addBatch();
                            }
                        }
                    }
                }

                pstmt.executeBatch();
                conn.commit();

                JOptionPane.showMessageDialog(this, "Sintomas vinculados com sucesso.");
                loadSintomas();

            } catch (SQLException e) {
                conn.rollback();
                JOptionPane.showMessageDialog(this, "Erro ao vincular sintomas: " + e.getMessage());
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro de conexão: " + e.getMessage());
        }
    }//GEN-LAST:event_linkButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultListModel<String> model = (DefaultListModel<String>) sintomasList.getModel();
    model.clear();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LinkSintomasForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LinkSintomasForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LinkSintomasForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LinkSintomasForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LinkSintomasForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox<Object> doencaComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton linkButton;
    private javax.swing.JList<String> sintomasList;
    // End of variables declaration//GEN-END:variables
private static class Doenca {
    private int id;
    private String descricao;

    public Doenca(int id, String descricao) {
        this.id = id;
        this.descricao = descricao;
    }

    public int getId() {
        return id;
    }

    public String getDescricao() {
        return descricao;
    }

    @Override
    public String toString() {
        return descricao; // Retorna a descrição da doença
    }
}


    private void loadSintomas() {
        String url = "jdbc:mysql://localhost:3306/SOSRS";
        String user = "root";
        String password = "204080@Ro";

        String sql = "SELECT id_sintomas, Doenca_sintomas FROM Sintomas";

        try (Connection conn = DriverManager.getConnection(url, user, password);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            DefaultListModel<String> model = new DefaultListModel<>();
            sintomasList.setModel(model);

            while (rs.next()) {
                String sintoma = rs.getString("Doenca_sintomas");
                model.addElement(sintoma);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar os sintomas: " + e.getMessage());
        }
    }

  private void loadDoencas() {
    String url = "jdbc:mysql://localhost:3306/SOSRS";
    String user = "root";
    String password = "204080@Ro";

    String sql = "SELECT id_doenca, Doenca_Descricao FROM Doenca";

    try (Connection conn = DriverManager.getConnection(url, user, password);
         PreparedStatement pstmt = conn.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {

        doencaComboBox.removeAllItems();
        doencaComboBox.addItem(new Doenca(0, "Selecione a Doença")); // Adiciona uma opção padrão
        while (rs.next()) {
            int id = rs.getInt("id_doenca");
            String descricao = rs.getString("Doenca_Descricao");
            doencaComboBox.addItem(new Doenca(id, descricao)); // Adiciona a instância da classe Doenca
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar as doenças: " + e.getMessage());
    }
}


}
