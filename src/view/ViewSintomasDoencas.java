/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author terra
 */
public class ViewSintomasDoencas extends javax.swing.JFrame {

    /**
     * Creates new form ViewSintomasDoencas
     */
    public ViewSintomasDoencas() {
        initComponents();
        loadSintomas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        scroll = new javax.swing.JScrollPane();
        sintomasTable = new javax.swing.JTable();
        showButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        doencasTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Identificar doença");

        jLabel1.setText("Sintoma para identificar");

        sintomasTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sintomas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll.setViewportView(sintomasTable);

        showButton.setText("Identificar Doença");
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });

        doencasTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doença"
            }
        ));
        jScrollPane4.setViewportView(doencasTable);

        jButton1.setText("cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                        .addComponent(scroll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showButton)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
         int[] selectedRows = sintomasTable.getSelectedRows();
        if (selectedRows.length == 0) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione um ou mais sintomas.");
            return;
        }
        loadDoencasForSintomas(selectedRows);
    }//GEN-LAST:event_showButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         sintomasTable.clearSelection();

    // Limpa a tabela de doenças
    DefaultTableModel doencasModel = (DefaultTableModel) doencasTable.getModel();
    doencasModel.setRowCount(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewSintomasDoencas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewSintomasDoencas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewSintomasDoencas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewSintomasDoencas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewSintomasDoencas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable doencasTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JButton showButton;
    private javax.swing.JTable sintomasTable;
    // End of variables declaration//GEN-END:variables
   private void loadSintomas() {
        String url = "jdbc:mysql://localhost:3306/SOSRS";
        String user = "root";
        String password = "204080@Ro";

        String sql = "SELECT id_sintomas, Doenca_sintomas FROM Sintomas";

        try (Connection conn = DriverManager.getConnection(url, user, password);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            DefaultTableModel model = (DefaultTableModel) sintomasTable.getModel();
            model.setRowCount(0); // Limpa a tabela

            while (rs.next()) {
                String descricao = rs.getString("Doenca_sintomas");
                model.addRow(new Object[]{descricao});
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar os sintomas: " + e.getMessage());
        }
    }

   private void loadDoencasForSintomas(int[] selectedRows) {
    String url = "jdbc:mysql://localhost:3306/SOSRS";
    String user = "root";
    String password = "204080@Ro";

    // Construir a consulta SQL para encontrar doenças com os sintomas selecionados
    StringBuilder queryBuilder = new StringBuilder();
    queryBuilder.append("SELECT DISTINCT D.Doenca_Descricao ")
                .append("FROM Doenca D ")
                .append("JOIN doencassintomas DS ON D.id_doenca = DS.id_doenca ")
                .append("WHERE DS.id_sintomas IN (");

    for (int i = 0; i < selectedRows.length; i++) {
        queryBuilder.append("?");
        if (i < selectedRows.length - 1) {
            queryBuilder.append(", ");
        }
    }
    queryBuilder.append(") GROUP BY D.id_doenca HAVING COUNT(D.id_doenca) = ").append(selectedRows.length);

    try (Connection conn = DriverManager.getConnection(url, user, password);
         PreparedStatement pstmt = conn.prepareStatement(queryBuilder.toString())) {

        // Definir os parâmetros da consulta
        for (int i = 0; i < selectedRows.length; i++) {
            int sintomaId = (int) sintomasTable.getValueAt(selectedRows[i], 0); // ID do sintoma
            pstmt.setInt(i + 1, sintomaId);
        }

        try (ResultSet rs = pstmt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) doencasTable.getModel();
            model.setRowCount(0); // Limpa a tabela

            // Adicionar as doenças na tabela
            while (rs.next()) {
                String descricao = rs.getString("Doenca_Descricao");
                model.addRow(new Object[]{descricao});
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar as doenças: " + e.getMessage());
    }
}

}
